# ABOUTME: 定期安全掃描和漏洞檢查 workflow
# ABOUTME: 檢查依賴項安全性、生成安全報告並在發現問題時創建 issues

name: Security Audit

on:
  schedule:
    # 每日 06:00 UTC 執行安全掃描
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Type of security scan to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'dependencies'
          - 'code'
          - 'supply-chain'
      create-issues:
        description: 'Create GitHub issues for findings'
        required: false
        default: true
        type: boolean

jobs:
  dependency-scan:
    name: 依賴項安全掃描
    runs-on: ubuntu-latest
    if: github.event.inputs.scan-type == 'dependencies' || github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == ''
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: 🔗 Create virtual environment
      run: uv venv
    
    - name: 📦 Install dependencies
      run: |
        source .venv/bin/activate
        uv sync --dev
    
    # Security tools are pre-installed in dev dependencies
    
    - name: 🛡️ Run Safety scan
      run: |
        source .venv/bin/activate
        uv run safety check --json --output safety-report.json || true
        uv run safety check --output safety-report.txt || true
    
    - name: 🔍 Run pip-audit
      run: |
        source .venv/bin/activate
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        uv run pip-audit --format=text --output=pip-audit-report.txt || true
    
    - name: 📊 Generate dependency report summary
      run: |
        python3 -c "
        import json
        from datetime import datetime
        
        summary = {
            'scan_date': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC'),
            'safety_issues': 0,
            'pip_audit_issues': 0,
            'critical_issues': [],
            'high_issues': [],
            'medium_issues': [],
            'low_issues': []
        }
        
        # Parse pip-audit report
        try:
            with open('pip-audit-report.json', 'r') as f:
                audit_data = json.load(f)
                summary['pip_audit_issues'] = len(audit_data.get('vulnerabilities', []))
        except:
            pass
        
        with open('dependency-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        
        print(f'Found {summary[\"safety_issues\"]} safety issues and {summary[\"pip_audit_issues\"]} pip-audit issues')
        "
    
    - name: 📄 Upload dependency scan results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-scan
        path: |
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          pip-audit-report.txt
          dependency-summary.json
        retention-days: 30

  code-scan:
    name: 程式碼安全掃描
    runs-on: ubuntu-latest
    if: github.event.inputs.scan-type == 'code' || github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == ''
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: 🔗 Create virtual environment
      run: uv venv
    
    - name: 📦 Install dependencies
      run: |
        source .venv/bin/activate
        uv sync --dev
    
    # Code scanning tools are pre-installed in dev dependencies
    
    - name: 🛡️ Run Bandit scan
      run: |
        source .venv/bin/activate
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt -o bandit-report.txt || true
    
    - name: 🔍 Run Semgrep scan
      run: |
        source .venv/bin/activate
        uv run semgrep --config=auto --json --output=semgrep-report.json src/ || true
        uv run semgrep --config=auto --output=semgrep-report.txt src/ || true
    
    - name: 📊 Generate code scan summary
      run: |
        python3 -c "
        import json
        from datetime import datetime
        
        summary = {
            'scan_date': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC'),
            'bandit_issues': 0,
            'semgrep_issues': 0,
            'high_confidence_issues': [],
            'medium_confidence_issues': [],
            'low_confidence_issues': []
        }
        
        # Parse Bandit report
        try:
            with open('bandit-report.json', 'r') as f:
                bandit_data = json.load(f)
                summary['bandit_issues'] = len(bandit_data.get('results', []))
        except:
            pass
        
        # Parse Semgrep report
        try:
            with open('semgrep-report.json', 'r') as f:
                semgrep_data = json.load(f)
                summary['semgrep_issues'] = len(semgrep_data.get('results', []))
        except:
            pass
        
        with open('code-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        
        print(f'Found {summary[\"bandit_issues\"]} bandit issues and {summary[\"semgrep_issues\"]} semgrep issues')
        "
    
    - name: 📄 Upload code scan results
      uses: actions/upload-artifact@v4
      with:
        name: code-security-scan
        path: |
          bandit-report.json
          bandit-report.txt
          semgrep-report.json
          semgrep-report.txt
          code-summary.json
        retention-days: 30

  supply-chain-scan:
    name: 供應鏈安全掃描
    runs-on: ubuntu-latest
    if: github.event.inputs.scan-type == 'supply-chain' || github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == ''
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔍 Run Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, MPL-2.0
    
    - name: 📊 Generate supply chain summary
      run: |
        echo '{"scan_date": "'$(date -u +"%Y-%m-%d %H:%M:%S UTC")'", "dependency_review": "completed"}' > supply-chain-summary.json
    
    - name: 📄 Upload supply chain scan results
      uses: actions/upload-artifact@v4
      with:
        name: supply-chain-security-scan
        path: |
          supply-chain-summary.json
        retention-days: 30

  create-security-issues:
    name: 創建安全問題 Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, supply-chain-scan]
    if: always() && (github.event.inputs.create-issues == 'true' || github.event.inputs.create-issues == '')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📄 Download scan results
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: 🔍 Analyze results and create issues
      run: |
        echo "🔍 檢查安全掃描結果..."
        
        # 檢查是否有需要報告的安全問題
        if [ -f "security-results/dependency-security-scan/dependency-summary.json" ]; then
          echo "找到依賴項掃描結果"
          # 這裡可以添加簡單的問題創建邏輯
        fi
        
        if [ -f "security-results/code-security-scan/code-summary.json" ]; then
          echo "找到程式碼掃描結果"
          # 這裡可以添加簡單的問題創建邏輯
        fi
        
        echo "安全掃描分析完成"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-security-status:
    name: 安全狀態通知
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, supply-chain-scan, create-security-issues]
    if: always()
    
    steps:
    - name: 📄 Download scan results
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: 📧 Send security status notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🔐 安全掃描完成報告",
            "attachments": [{
              "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
              "fields": [{
                "title": "掃描結果",
                "value": "依賴項掃描: ${{ needs.dependency-scan.result }}\n程式碼掃描: ${{ needs.code-scan.result }}\n供應鏈掃描: ${{ needs.supply-chain-scan.result }}",
                "short": true
              }, {
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "掃描時間",
                "value": "${{ github.event.head_commit.timestamp }}",
                "short": true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}